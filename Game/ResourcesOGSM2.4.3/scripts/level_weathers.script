class "WeatherManager"
function WeatherManager:__init()
	--printf					("WeatherManager:WeatherManager()")
	self.weather_change_day = 0
	self.update_time = 0
	self.update_level = ""
end

function WeatherManager:reset()
	--printf					("WeatherManager:WeatherManager():Reset()")
	-- Загрузить кондлист с погодой.
	local ini = ini_file("game.ltx")
	local weather
	if ogsm_options.weather == "dark" then
		weather = utils.cfg_get_string(ini, level.name(), "weathers2", db.actor, false, "", "dark")
	else 
		weather = utils.cfg_get_string(ini, level.name(), "weathers", db.actor, false, "", "default")
	end
	local postprocess = utils.cfg_get_string(ini, level.name(), "postprocess", db.actor, false, "")
	if postprocess ~= nil then
		--printf("LEVEL POSTPROCESS: level: [%s], postprocess: [%s]", level.name(), postprocess)
		level.add_pp_effector(postprocess, 999, true)	
	else
		--printf("LEVEL POSTPROCESS: level: [%s], postprocess: [none]", level.name())
		level.remove_pp_effector(999)
	end	

	if (level.name() == "l08_yantar" and has_alife_info("yan_controller_respawn_01")) or
	   (level.name() == "l10_radar" and has_alife_info("bun_antenna_off")) or
	   (level.name() == "l11_pripyat" and has_alife_info("freeplay")) or
	   (level.name() == "l12_stancia" and has_alife_info("freeplay")) or
	   (level.name() == "l12_stancia_2" and has_alife_info("freeplay")) then
		self.weather_list = xr_logic.parse_condlist(db.actor, level.name(), "weather", ogsm_options.weather)
	else
		self.weather_list = xr_logic.parse_condlist(db.actor, level.name(), "weather", weather)
	end	
	self:select_weather(true)
end

function WeatherManager:select_weather(now)
	self.weather_change_day = level.get_time_days()
	self.update_level = level.name()
	local weather = xr_logic.pick_section_from_condlist(db.actor, db.actor, self.weather_list)
	--printf("WEATHER: '%s' now '%s'", weather, tostring(now))
	level.set_weather(weather,now)
end

function WeatherManager:load(F)
	self.update_level 		= F:r_stringZ()
	self.update_time 		= F:r_u32()
end

function WeatherManager:save(F)
	F:w_stringZ				(self.update_level)
	F:w_u32					(self.update_time)
end

function WeatherManager:update()
	if self.update_time <= time_global() then
		--printf("weather_update day [%s]", level.get_time_days())
		
		if self.update_level ~= level.name() then
			self:select_weather(true)			
		end
		
		if self.weather_change_day ~= level.get_time_days() then
			self:select_weather(false)
		end
		self.update_time = self.update_time + 10000
	end
end